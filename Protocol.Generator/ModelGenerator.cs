namespace Protocol.Generator
{
    using System.Collections.Generic;
    using System.Text;

    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    using Protocol.Generator.Generators;
    using Protocol.Generator.XSD;

    /// <summary>
    /// Generator of the Protocol model.
    /// </summary>
    public static class ModelGenerator
    {
        const string AUTO_GENERATED = @"// Auto-generated code
// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>";

        private const string ignoreWarnings = @"#pragma warning disable CS1591";

        /// <summary>
        /// Used by tt file in Models.Protocol.
        /// </summary>
        public static string GenerateCode(string path)
        {
            var xsd = new ProtocolXsd(path);

            StringBuilder sb = new StringBuilder();
            sb.AppendLine(GenerateEnums(xsd));
            sb.AppendLine(GenerateReadProtocolVisitor(xsd));
            sb.AppendLine(GenerateReadInterfaces(xsd));
            sb.AppendLine(GenerateReadClasses(xsd));
            sb.AppendLine(GenerateEditClasses(xsd));
            sb.AppendLine(GenerateEditProtocolVisitor(xsd));

            return sb.ToString();
        }

        internal static string GenerateEnums(ProtocolXsd xsd)
        {
            var code = CreateCompilationUnit(new[] { EnumsGenerator.GenerateRootNamespace(xsd) }).ToString();

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(AUTO_GENERATED);
            stringBuilder.AppendLine(ignoreWarnings);
            stringBuilder.AppendLine(code);

            return stringBuilder.ToString();
        }

        internal static string GenerateReadProtocolVisitor(ProtocolXsd xsd)
        {
            var code = CreateCompilationUnit(new[] { ReadProtocolVisitorGenerator.GenerateRootNamespace(xsd) }).ToString();

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(AUTO_GENERATED);
            stringBuilder.AppendLine(ignoreWarnings);
            stringBuilder.AppendLine(code);

            return stringBuilder.ToString();
        }

        internal static string GenerateReadInterfaces(ProtocolXsd xsd)
        {
            var code = CreateCompilationUnit(new[] { InterfacesGenerator.GenerateRootNamespace(xsd) }).ToString();

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(AUTO_GENERATED);
            stringBuilder.AppendLine(ignoreWarnings);
            stringBuilder.AppendLine(code);

            return stringBuilder.ToString();
        }

        internal static string GenerateReadClasses(ProtocolXsd xsd)
        {
            var code = CreateCompilationUnit(new[] { ReadClassesGenerator.GenerateRootNamespace(xsd) }).ToString();

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(AUTO_GENERATED);
            stringBuilder.AppendLine(ignoreWarnings);
            stringBuilder.AppendLine(code);

            return stringBuilder.ToString();
        }

        internal static string GenerateEditClasses(ProtocolXsd xsd)
        {
            var code = CreateCompilationUnit(new[] { EditClassesGenerator.GenerateRootNamespace(xsd) }).ToString();

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(AUTO_GENERATED);
            stringBuilder.AppendLine(ignoreWarnings);
            stringBuilder.AppendLine(code);

            return stringBuilder.ToString();
        }

        internal static string GenerateEditProtocolVisitor(ProtocolXsd xsd)
        {
            var code = CreateCompilationUnit(new[] { EditProtocolVisitorGenerator.GenerateRootNamespace(xsd) }).ToString();

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(AUTO_GENERATED);
            stringBuilder.AppendLine(ignoreWarnings);
            stringBuilder.AppendLine(code);

            return stringBuilder.ToString();
        }

        private static CompilationUnitSyntax CreateCompilationUnit(IEnumerable<MemberDeclarationSyntax> members)
        {
            var compilationUnit = SyntaxFactory.CompilationUnit()
             .WithMembers(SyntaxFactory.List(members))
             .NormalizeWhitespace();

            return compilationUnit;
        }
    }
}
